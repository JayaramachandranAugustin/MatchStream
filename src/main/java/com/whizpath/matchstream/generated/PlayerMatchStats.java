/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.whizpath.matchstream.generated;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Player Match statistics */
@org.apache.avro.specific.AvroGenerated
public class PlayerMatchStats extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8931704369593511644L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PlayerMatchStats\",\"namespace\":\"com.whizpath.matchstream.generated\",\"doc\":\"Player Match statistics\",\"fields\":[{\"name\":\"playerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"playerName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"goalCount\",\"type\":\"int\"},{\"name\":\"assistCount\",\"type\":\"int\"},{\"name\":\"keypass\",\"type\":\"int\"},{\"name\":\"dribble\",\"type\":\"int\"},{\"name\":\"tackle\",\"type\":\"int\"},{\"name\":\"matchId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"teamName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"playedMinutes\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PlayerMatchStats> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PlayerMatchStats> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PlayerMatchStats> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PlayerMatchStats> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PlayerMatchStats> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PlayerMatchStats to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PlayerMatchStats from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PlayerMatchStats instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PlayerMatchStats fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String playerId;
  private java.lang.String playerName;
  private int goalCount;
  private int assistCount;
  private int keypass;
  private int dribble;
  private int tackle;
  private java.lang.String matchId;
  private java.lang.String teamName;
  private double playedMinutes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PlayerMatchStats() {}

  /**
   * All-args constructor.
   * @param playerId The new value for playerId
   * @param playerName The new value for playerName
   * @param goalCount The new value for goalCount
   * @param assistCount The new value for assistCount
   * @param keypass The new value for keypass
   * @param dribble The new value for dribble
   * @param tackle The new value for tackle
   * @param matchId The new value for matchId
   * @param teamName The new value for teamName
   * @param playedMinutes The new value for playedMinutes
   */
  public PlayerMatchStats(java.lang.String playerId, java.lang.String playerName, java.lang.Integer goalCount, java.lang.Integer assistCount, java.lang.Integer keypass, java.lang.Integer dribble, java.lang.Integer tackle, java.lang.String matchId, java.lang.String teamName, java.lang.Double playedMinutes) {
    this.playerId = playerId;
    this.playerName = playerName;
    this.goalCount = goalCount;
    this.assistCount = assistCount;
    this.keypass = keypass;
    this.dribble = dribble;
    this.tackle = tackle;
    this.matchId = matchId;
    this.teamName = teamName;
    this.playedMinutes = playedMinutes;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return playerId;
    case 1: return playerName;
    case 2: return goalCount;
    case 3: return assistCount;
    case 4: return keypass;
    case 5: return dribble;
    case 6: return tackle;
    case 7: return matchId;
    case 8: return teamName;
    case 9: return playedMinutes;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: playerId = value$ != null ? value$.toString() : null; break;
    case 1: playerName = value$ != null ? value$.toString() : null; break;
    case 2: goalCount = (java.lang.Integer)value$; break;
    case 3: assistCount = (java.lang.Integer)value$; break;
    case 4: keypass = (java.lang.Integer)value$; break;
    case 5: dribble = (java.lang.Integer)value$; break;
    case 6: tackle = (java.lang.Integer)value$; break;
    case 7: matchId = value$ != null ? value$.toString() : null; break;
    case 8: teamName = value$ != null ? value$.toString() : null; break;
    case 9: playedMinutes = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'playerId' field.
   * @return The value of the 'playerId' field.
   */
  public java.lang.String getPlayerId() {
    return playerId;
  }


  /**
   * Sets the value of the 'playerId' field.
   * @param value the value to set.
   */
  public void setPlayerId(java.lang.String value) {
    this.playerId = value;
  }

  /**
   * Gets the value of the 'playerName' field.
   * @return The value of the 'playerName' field.
   */
  public java.lang.String getPlayerName() {
    return playerName;
  }


  /**
   * Sets the value of the 'playerName' field.
   * @param value the value to set.
   */
  public void setPlayerName(java.lang.String value) {
    this.playerName = value;
  }

  /**
   * Gets the value of the 'goalCount' field.
   * @return The value of the 'goalCount' field.
   */
  public int getGoalCount() {
    return goalCount;
  }


  /**
   * Sets the value of the 'goalCount' field.
   * @param value the value to set.
   */
  public void setGoalCount(int value) {
    this.goalCount = value;
  }

  /**
   * Gets the value of the 'assistCount' field.
   * @return The value of the 'assistCount' field.
   */
  public int getAssistCount() {
    return assistCount;
  }


  /**
   * Sets the value of the 'assistCount' field.
   * @param value the value to set.
   */
  public void setAssistCount(int value) {
    this.assistCount = value;
  }

  /**
   * Gets the value of the 'keypass' field.
   * @return The value of the 'keypass' field.
   */
  public int getKeypass() {
    return keypass;
  }


  /**
   * Sets the value of the 'keypass' field.
   * @param value the value to set.
   */
  public void setKeypass(int value) {
    this.keypass = value;
  }

  /**
   * Gets the value of the 'dribble' field.
   * @return The value of the 'dribble' field.
   */
  public int getDribble() {
    return dribble;
  }


  /**
   * Sets the value of the 'dribble' field.
   * @param value the value to set.
   */
  public void setDribble(int value) {
    this.dribble = value;
  }

  /**
   * Gets the value of the 'tackle' field.
   * @return The value of the 'tackle' field.
   */
  public int getTackle() {
    return tackle;
  }


  /**
   * Sets the value of the 'tackle' field.
   * @param value the value to set.
   */
  public void setTackle(int value) {
    this.tackle = value;
  }

  /**
   * Gets the value of the 'matchId' field.
   * @return The value of the 'matchId' field.
   */
  public java.lang.String getMatchId() {
    return matchId;
  }


  /**
   * Sets the value of the 'matchId' field.
   * @param value the value to set.
   */
  public void setMatchId(java.lang.String value) {
    this.matchId = value;
  }

  /**
   * Gets the value of the 'teamName' field.
   * @return The value of the 'teamName' field.
   */
  public java.lang.String getTeamName() {
    return teamName;
  }


  /**
   * Sets the value of the 'teamName' field.
   * @param value the value to set.
   */
  public void setTeamName(java.lang.String value) {
    this.teamName = value;
  }

  /**
   * Gets the value of the 'playedMinutes' field.
   * @return The value of the 'playedMinutes' field.
   */
  public double getPlayedMinutes() {
    return playedMinutes;
  }


  /**
   * Sets the value of the 'playedMinutes' field.
   * @param value the value to set.
   */
  public void setPlayedMinutes(double value) {
    this.playedMinutes = value;
  }

  /**
   * Creates a new PlayerMatchStats RecordBuilder.
   * @return A new PlayerMatchStats RecordBuilder
   */
  public static com.whizpath.matchstream.generated.PlayerMatchStats.Builder newBuilder() {
    return new com.whizpath.matchstream.generated.PlayerMatchStats.Builder();
  }

  /**
   * Creates a new PlayerMatchStats RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PlayerMatchStats RecordBuilder
   */
  public static com.whizpath.matchstream.generated.PlayerMatchStats.Builder newBuilder(com.whizpath.matchstream.generated.PlayerMatchStats.Builder other) {
    if (other == null) {
      return new com.whizpath.matchstream.generated.PlayerMatchStats.Builder();
    } else {
      return new com.whizpath.matchstream.generated.PlayerMatchStats.Builder(other);
    }
  }

  /**
   * Creates a new PlayerMatchStats RecordBuilder by copying an existing PlayerMatchStats instance.
   * @param other The existing instance to copy.
   * @return A new PlayerMatchStats RecordBuilder
   */
  public static com.whizpath.matchstream.generated.PlayerMatchStats.Builder newBuilder(com.whizpath.matchstream.generated.PlayerMatchStats other) {
    if (other == null) {
      return new com.whizpath.matchstream.generated.PlayerMatchStats.Builder();
    } else {
      return new com.whizpath.matchstream.generated.PlayerMatchStats.Builder(other);
    }
  }

  /**
   * RecordBuilder for PlayerMatchStats instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlayerMatchStats>
    implements org.apache.avro.data.RecordBuilder<PlayerMatchStats> {

    private java.lang.String playerId;
    private java.lang.String playerName;
    private int goalCount;
    private int assistCount;
    private int keypass;
    private int dribble;
    private int tackle;
    private java.lang.String matchId;
    private java.lang.String teamName;
    private double playedMinutes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.whizpath.matchstream.generated.PlayerMatchStats.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.playerId)) {
        this.playerId = data().deepCopy(fields()[0].schema(), other.playerId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.playerName)) {
        this.playerName = data().deepCopy(fields()[1].schema(), other.playerName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.goalCount)) {
        this.goalCount = data().deepCopy(fields()[2].schema(), other.goalCount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.assistCount)) {
        this.assistCount = data().deepCopy(fields()[3].schema(), other.assistCount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.keypass)) {
        this.keypass = data().deepCopy(fields()[4].schema(), other.keypass);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.dribble)) {
        this.dribble = data().deepCopy(fields()[5].schema(), other.dribble);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.tackle)) {
        this.tackle = data().deepCopy(fields()[6].schema(), other.tackle);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.matchId)) {
        this.matchId = data().deepCopy(fields()[7].schema(), other.matchId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.teamName)) {
        this.teamName = data().deepCopy(fields()[8].schema(), other.teamName);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.playedMinutes)) {
        this.playedMinutes = data().deepCopy(fields()[9].schema(), other.playedMinutes);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing PlayerMatchStats instance
     * @param other The existing instance to copy.
     */
    private Builder(com.whizpath.matchstream.generated.PlayerMatchStats other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.playerId)) {
        this.playerId = data().deepCopy(fields()[0].schema(), other.playerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.playerName)) {
        this.playerName = data().deepCopy(fields()[1].schema(), other.playerName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.goalCount)) {
        this.goalCount = data().deepCopy(fields()[2].schema(), other.goalCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.assistCount)) {
        this.assistCount = data().deepCopy(fields()[3].schema(), other.assistCount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.keypass)) {
        this.keypass = data().deepCopy(fields()[4].schema(), other.keypass);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.dribble)) {
        this.dribble = data().deepCopy(fields()[5].schema(), other.dribble);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.tackle)) {
        this.tackle = data().deepCopy(fields()[6].schema(), other.tackle);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.matchId)) {
        this.matchId = data().deepCopy(fields()[7].schema(), other.matchId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.teamName)) {
        this.teamName = data().deepCopy(fields()[8].schema(), other.teamName);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.playedMinutes)) {
        this.playedMinutes = data().deepCopy(fields()[9].schema(), other.playedMinutes);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'playerId' field.
      * @return The value.
      */
    public java.lang.String getPlayerId() {
      return playerId;
    }


    /**
      * Sets the value of the 'playerId' field.
      * @param value The value of 'playerId'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder setPlayerId(java.lang.String value) {
      validate(fields()[0], value);
      this.playerId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'playerId' field has been set.
      * @return True if the 'playerId' field has been set, false otherwise.
      */
    public boolean hasPlayerId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'playerId' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder clearPlayerId() {
      playerId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'playerName' field.
      * @return The value.
      */
    public java.lang.String getPlayerName() {
      return playerName;
    }


    /**
      * Sets the value of the 'playerName' field.
      * @param value The value of 'playerName'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder setPlayerName(java.lang.String value) {
      validate(fields()[1], value);
      this.playerName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'playerName' field has been set.
      * @return True if the 'playerName' field has been set, false otherwise.
      */
    public boolean hasPlayerName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'playerName' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder clearPlayerName() {
      playerName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'goalCount' field.
      * @return The value.
      */
    public int getGoalCount() {
      return goalCount;
    }


    /**
      * Sets the value of the 'goalCount' field.
      * @param value The value of 'goalCount'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder setGoalCount(int value) {
      validate(fields()[2], value);
      this.goalCount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'goalCount' field has been set.
      * @return True if the 'goalCount' field has been set, false otherwise.
      */
    public boolean hasGoalCount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'goalCount' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder clearGoalCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'assistCount' field.
      * @return The value.
      */
    public int getAssistCount() {
      return assistCount;
    }


    /**
      * Sets the value of the 'assistCount' field.
      * @param value The value of 'assistCount'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder setAssistCount(int value) {
      validate(fields()[3], value);
      this.assistCount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'assistCount' field has been set.
      * @return True if the 'assistCount' field has been set, false otherwise.
      */
    public boolean hasAssistCount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'assistCount' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder clearAssistCount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'keypass' field.
      * @return The value.
      */
    public int getKeypass() {
      return keypass;
    }


    /**
      * Sets the value of the 'keypass' field.
      * @param value The value of 'keypass'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder setKeypass(int value) {
      validate(fields()[4], value);
      this.keypass = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'keypass' field has been set.
      * @return True if the 'keypass' field has been set, false otherwise.
      */
    public boolean hasKeypass() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'keypass' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder clearKeypass() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'dribble' field.
      * @return The value.
      */
    public int getDribble() {
      return dribble;
    }


    /**
      * Sets the value of the 'dribble' field.
      * @param value The value of 'dribble'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder setDribble(int value) {
      validate(fields()[5], value);
      this.dribble = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'dribble' field has been set.
      * @return True if the 'dribble' field has been set, false otherwise.
      */
    public boolean hasDribble() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'dribble' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder clearDribble() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'tackle' field.
      * @return The value.
      */
    public int getTackle() {
      return tackle;
    }


    /**
      * Sets the value of the 'tackle' field.
      * @param value The value of 'tackle'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder setTackle(int value) {
      validate(fields()[6], value);
      this.tackle = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'tackle' field has been set.
      * @return True if the 'tackle' field has been set, false otherwise.
      */
    public boolean hasTackle() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'tackle' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder clearTackle() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'matchId' field.
      * @return The value.
      */
    public java.lang.String getMatchId() {
      return matchId;
    }


    /**
      * Sets the value of the 'matchId' field.
      * @param value The value of 'matchId'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder setMatchId(java.lang.String value) {
      validate(fields()[7], value);
      this.matchId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'matchId' field has been set.
      * @return True if the 'matchId' field has been set, false otherwise.
      */
    public boolean hasMatchId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'matchId' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder clearMatchId() {
      matchId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'teamName' field.
      * @return The value.
      */
    public java.lang.String getTeamName() {
      return teamName;
    }


    /**
      * Sets the value of the 'teamName' field.
      * @param value The value of 'teamName'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder setTeamName(java.lang.String value) {
      validate(fields()[8], value);
      this.teamName = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'teamName' field has been set.
      * @return True if the 'teamName' field has been set, false otherwise.
      */
    public boolean hasTeamName() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'teamName' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder clearTeamName() {
      teamName = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'playedMinutes' field.
      * @return The value.
      */
    public double getPlayedMinutes() {
      return playedMinutes;
    }


    /**
      * Sets the value of the 'playedMinutes' field.
      * @param value The value of 'playedMinutes'.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder setPlayedMinutes(double value) {
      validate(fields()[9], value);
      this.playedMinutes = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'playedMinutes' field has been set.
      * @return True if the 'playedMinutes' field has been set, false otherwise.
      */
    public boolean hasPlayedMinutes() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'playedMinutes' field.
      * @return This builder.
      */
    public com.whizpath.matchstream.generated.PlayerMatchStats.Builder clearPlayedMinutes() {
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PlayerMatchStats build() {
      try {
        PlayerMatchStats record = new PlayerMatchStats();
        record.playerId = fieldSetFlags()[0] ? this.playerId : (java.lang.String) defaultValue(fields()[0]);
        record.playerName = fieldSetFlags()[1] ? this.playerName : (java.lang.String) defaultValue(fields()[1]);
        record.goalCount = fieldSetFlags()[2] ? this.goalCount : (java.lang.Integer) defaultValue(fields()[2]);
        record.assistCount = fieldSetFlags()[3] ? this.assistCount : (java.lang.Integer) defaultValue(fields()[3]);
        record.keypass = fieldSetFlags()[4] ? this.keypass : (java.lang.Integer) defaultValue(fields()[4]);
        record.dribble = fieldSetFlags()[5] ? this.dribble : (java.lang.Integer) defaultValue(fields()[5]);
        record.tackle = fieldSetFlags()[6] ? this.tackle : (java.lang.Integer) defaultValue(fields()[6]);
        record.matchId = fieldSetFlags()[7] ? this.matchId : (java.lang.String) defaultValue(fields()[7]);
        record.teamName = fieldSetFlags()[8] ? this.teamName : (java.lang.String) defaultValue(fields()[8]);
        record.playedMinutes = fieldSetFlags()[9] ? this.playedMinutes : (java.lang.Double) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PlayerMatchStats>
    WRITER$ = (org.apache.avro.io.DatumWriter<PlayerMatchStats>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PlayerMatchStats>
    READER$ = (org.apache.avro.io.DatumReader<PlayerMatchStats>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.playerId);

    out.writeString(this.playerName);

    out.writeInt(this.goalCount);

    out.writeInt(this.assistCount);

    out.writeInt(this.keypass);

    out.writeInt(this.dribble);

    out.writeInt(this.tackle);

    out.writeString(this.matchId);

    out.writeString(this.teamName);

    out.writeDouble(this.playedMinutes);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.playerId = in.readString();

      this.playerName = in.readString();

      this.goalCount = in.readInt();

      this.assistCount = in.readInt();

      this.keypass = in.readInt();

      this.dribble = in.readInt();

      this.tackle = in.readInt();

      this.matchId = in.readString();

      this.teamName = in.readString();

      this.playedMinutes = in.readDouble();

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.playerId = in.readString();
          break;

        case 1:
          this.playerName = in.readString();
          break;

        case 2:
          this.goalCount = in.readInt();
          break;

        case 3:
          this.assistCount = in.readInt();
          break;

        case 4:
          this.keypass = in.readInt();
          break;

        case 5:
          this.dribble = in.readInt();
          break;

        case 6:
          this.tackle = in.readInt();
          break;

        case 7:
          this.matchId = in.readString();
          break;

        case 8:
          this.teamName = in.readString();
          break;

        case 9:
          this.playedMinutes = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










